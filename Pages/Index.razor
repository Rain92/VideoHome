@page "/"
@implements IAsyncDisposable
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JS
@using VideoHome.Data;
@using Excubo.Blazor.TreeViews
@using System.Diagnostics
@using SoloX.BlazorLayout.Core
@using SoloX.BlazorLayout.Containers.Dock

<link rel="stylesheet" href="css/plyr.css" />

<DockContainer Fill="Fill.Full" Proportion="20">
    <DockPanel Class="px-4" Side="Side.Right">

        <TreeView Items="Nested" GetChildren="(item) => item.Children" InitiallyCollapsed="true">
            <ItemTemplate>
                <div @onclick="()=>ItemClicked(context.Item)">
                    @if (context.Item.ItemType == FileTreeViewItem.NodeType.Folder)
                    {
                        <MatIcon Icon="folder" />
                    }
                    else
                    {
                        <MatIcon Icon="insert_drive_file" />
                    }
                    @context.Item.Text
                </div>
            </ItemTemplate>
        </TreeView>
    </DockPanel>

    <div class="d-flex flex-column p-2 align-content-center">
        <BlazoredVideo @ref="videoRef"  id="playerx"
            width="1280" height="720" 
            controls playsinline
            EventFired="OnEvent"
            VideoEventOptions="options" 
            data-plyr-config='{ "disableContextMenu": "false" }'>
            <source src=@videoSource type="video/mp4" />
        </BlazoredVideo>
    </div>

</DockContainer>


@code {
    private Dictionary<VideoEvents, VideoStateOptions> options = new();
    private VideoState videoState = new();

    private DateTimeOffset lastUpdateRecieved = DateTimeOffset.MinValue;

    private BlazoredVideo videoRef;
    private HubConnection? hubConnection;
    string? videoSource = "video/Korra/Book1/Chapter_06_And_the_Winner_is.mp4";

    async Task ItemClicked(FileTreeViewItem item)
    {
        if (item.ItemType == FileTreeViewItem.NodeType.File)
        {
            Debug.WriteLine($"Item pressed: {item.Path}");
            videoSource = item.Path;
            await videoRef.PausePlayback();
            await SendState();

            await videoRef.ReloadControl();
            StateHasChanged();
        }
        else
        {
            Debug.WriteLine($"Folder clicked!");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        IJSObjectReference Plyr;
        IJSObjectReference Main;    

        if (firstRender)
        {
            Plyr = await JS.InvokeAsync<IJSObjectReference>(
                        "import", "./plyr.js");
            Main = await JS.InvokeAsync<IJSObjectReference>(
                        "import", "./plyr-loder.js");
            await Main.InvokeVoidAsync("load", "playerx").AsTask();

            await hubConnection.SendAsync("RequestState");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var allOptionsEnabled = new VideoStateOptions() { All = true };
        foreach (var item in (VideoEvents[])(Enum.GetValues(typeof(VideoEvents))))
        {
            if (item != VideoEvents.NotSet)
            {
                options[item] = allOptionsEnabled;
            }
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/syncvideohub"))
            .Build();

        hubConnection.On<int, DateTimeOffset>("Ping", async (n, timestamp) =>
        {
            await hubConnection.SendAsync("Pong", n, timestamp);
        });

        hubConnection.On<VideoStateDto>("ReceiveState", StateRecieved);

        await hubConnection.StartAsync();

    }

    private VideoStateDto GetStateDto()
    {
        return new VideoStateDto()
        {
            LastUpdated = DateTimeOffset.UtcNow,
            IsPlaying = !videoState.Paused,
            Source = videoSource,
            VideoTimestamp = videoState.CurrentTime
        };
    }

    private async Task StateRecieved(VideoStateDto newstate)
    {
        if (videoRef is null)
            return;
        Console.WriteLine($"Client: State recieved. {newstate.Source?.Split('/').LastOrDefault()} {newstate.IsPlaying} {newstate.VideoTimestamp}");

        if(newstate.Source != videoSource)
        {
            Console.WriteLine($"Client: Setting video source.");
            videoSource = newstate.Source;

            if(!string.IsNullOrEmpty(videoSource))
            {
                await InvokeAsync(StateHasChanged);
                await videoRef.ReloadControl();
            }
        }
        if(Math.Abs(newstate.VideoTimestamp - videoState.CurrentTime) > 0.5)
        {
            Console.WriteLine($"Client: Setting time.");
            await videoRef.SetCurrentTimeAsync(newstate.VideoTimestamp); 
        }
        @* if (newstate.IsPlaying == videoState.Paused)
        { *@
            if (newstate.IsPlaying)
            {
                Console.WriteLine($"Client: Pausing playback.");
                await videoRef.StartPlayback();
            }
            else
            {
                Console.WriteLine($"Client: Pausing playback.");
                await videoRef.PausePlayback();
            }
        @* } *@
        lastUpdateRecieved = DateTimeOffset.Now;
        @* StateHasChanged(); *@
    }

    private async Task SendState()
    {
        if ((DateTimeOffset.Now - lastUpdateRecieved).TotalSeconds < 0.7)
            return;

        VideoStateDto newstate = GetStateDto(); 
        Console.WriteLine($"Client: Sending state. {newstate.Source?.Split('/')?.LastOrDefault()} {newstate.IsPlaying} {newstate.VideoTimestamp}");

        await hubConnection.SendAsync("UpdateState", newstate);
    }

    private async void OnEvent(VideoEventData videoData)
    {
        videoState = videoData.State;

        
        switch (videoData.EventName)
        {
            case VideoEvents.Play:
            case VideoEvents.Playing:
            case VideoEvents.Pause:
            case VideoEvents.Seeking:
            case VideoEvents.Seeked:
                Console.WriteLine($"Client: OnEvent: {videoData.EventName} {videoState.CurrentTime}");
                await SendState();
                break;

            default:
            break;
        }
        @* StateHasChanged(); *@
    }

    private List<FileTreeViewItem> Nested =
    FileTreeViewItem.EnumerateFilesWithRootMapping("/home/andreas/Videos/", "video/");

    public async ValueTask DisposeAsync()
    {
        Console.WriteLine("Client: Disposing razor page.");
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}