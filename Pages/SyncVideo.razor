@page "/"
@attribute [Authorize]
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client
@using VideoHome.Data;
@using VideoHome.Services;
@using SoloX.BlazorLayout.Core
@using SoloX.BlazorLayout.Containers.Dock
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using YoutubeExplode;
@using YoutubeExplode.Videos.Streams;
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<SyncVideo> logger
@inject ToastService ToastService


<DockContainer Fill="Fill.Full" Proportion="75">
    <DockPanel Class="px-4" Side="Side.Left"> 

    <div class="d-flex flex-column p-2 align-content-center">
        <div>@videoSourceTitle</div>
        <BlazoredVideo @ref="videoRef" width="1280" height="720" controls playsinline EventFired="OnEvent"
            VideoEventOptions="options">
            <source src=@videoSource type="video/mp4" />
            <!-- Caption files -->
            @if (videoCaptions != null && videoCaptions.Any())
            {
                foreach (var cc in videoCaptions)
                {
                    <track kind="subtitles" label="English" srclang="en" src=@cc default />
                }
            }
        </BlazoredVideo>
    </div>

    </DockPanel>
    <DockPanel Class="px-4" Side="Side.Right"> 

        <MudPaper Width="320px" >
            <MudList Clickable="false">
                <MudListSubheader>
                    Connected Users
                </MudListSubheader>
                @foreach (var user in @userListItems)
                {
                    <MudListItem Text="@user" />
                }
            </MudList>
        </MudPaper>
        <br>

        <MudPaper Width="320px">
            <MudList Clickable="false">
                <MudListSubheader>
                    Watch Youtube stream
                </MudListSubheader>
                <MudListItem>
                    <BootstrapInput 
                    TValue="string" 
                    PlaceHolder="Youtube URL" 
                    @bind-Value="@streamInputBoxContent" />
                    <button class="btn btn-primary" onclick="@PlayYoutube">Play</button>
                </MudListItem>
            </MudList>
        </MudPaper>
        <br>

        <MudPaper Width="320px">
            <MudList Clickable="false">
                <MudListSubheader>
                    Upload Video
                </MudListSubheader>
                <MudListItem>
                    <ButtonUpload TValue="string" DisplayText="Upload" OnChange="@UploadFiles"
                        ShowUploadFileList="false" BrowserButtonText="Upload"
                        BrowserButtonIcon="fa-solid fa-cloud-arrow-up" class="mt-3"></ButtonUpload>
                    @if (@isUploading)
                    {
                        <div>Uploading Video...</div>
                    }
                </MudListItem>
            </MudList>
        </MudPaper>
        <br>

        <MudPaper Width="320px">
            <MudList Clickable="false">
                <MudListSubheader>
                    Local Videos <br>
                    <button class="btn btn-primary" onclick="@NextVideo">Next</button>
                </MudListSubheader>
                <MudListItem>
                    <TreeView TItem="FileTreeViewItem" 
                    Items="@TreeViewItems" ShowIcon="true" 
                    ClickToggleNode="true" 
                    OnTreeItemClick="@ItemClicked" /> 
                </MudListItem>
            </MudList>
        </MudPaper>

    </DockPanel>
</DockContainer>


@code {
    private Dictionary<VideoEvents, VideoStateOptions> options = new();
    private VideoState videoState = new();

    private DateTimeOffset lastUpdateRecieved = DateTimeOffset.MinValue;

    private BlazoredVideo videoRef;
    private string? streamInputBoxContent = "";
    private HubConnection? hubConnection;
    string? videoSource = "";
    string videoSourceTitle = "";

    bool disableSendingState = false;

    List<string> videoCaptions = new() {""};

    private YoutubeClient youtube = new();
    DotNetObjectReference<SyncVideo> dotnetRef;

    private async void PlayYoutube()
    {
        var url = streamInputBoxContent;
        if(url == null || !url.Contains("youtube.") || !url.Contains("watch?v="))
            return;
            
        logger.LogInformation($"Getting youtube video for {url}");
        var streamManifest = await youtube.Videos.Streams.GetManifestAsync(url);
        var streamInfo = streamManifest.GetMuxedStreams().GetWithHighestVideoQuality();
        logger.LogInformation(streamInfo.Url);
        await SetVideoSource(streamInfo.Url, false);
    }

    private async Task ItemClicked(TreeViewItem<FileTreeViewItem> treeitem)
    {
        var item = treeitem.Value;
        if (item.ItemType == FileTreeViewItem.NodeType.File)
        {
            logger.LogInformation($"Item pressed: {item.Path}");
            await SetVideoSource(item.Path, true);
        }
        else
        {
            logger.LogInformation($"Folder clicked!");
        }
    }

    private async void NextVideo()
    {
        logger.LogInformation($"Next Video pressed");
        var path = videoSource;
        if(string.IsNullOrEmpty(path))
            return;

        foreach(var tree in TreeViewItems)
        {
            var nextVideoPath = FindNextVideo(path, tree);
            if(!string.IsNullOrEmpty(nextVideoPath))
            {
                await SetVideoSource(nextVideoPath, true);
                return;
            }
        }
    }

    private string? FindNextVideo(string path, TreeViewItem<FileTreeViewItem> tree)
    {
        for(int i = 0; i < tree.Items?.Count(); i++)
        {
            var item = tree.Items[i];
            if(item.Value?.ItemType == FileTreeViewItem.NodeType.File && item.Value?.Path == path)
            {
                if(i+1 < tree.Items?.Count() && tree.Items[i+1].Value.ItemType == FileTreeViewItem.NodeType.File)
                    return tree.Items[i+1].Value.Path;
            }
            else if (item.Value?.ItemType == FileTreeViewItem.NodeType.Folder)
            {
                var res = FindNextVideo(path, item);
                if (!string.IsNullOrEmpty(res))
                    return res;
            }
        }

        return null;
    }

    private async Task SetVideoSource(string src, bool setCaptions)
    {
        videoSource = src;
        videoCaptions = new() { setCaptions? Path.ChangeExtension(src, ".vtt") : "" };
        videoSourceTitle = videoSource?.Split('/').LastOrDefault() ?? "";
        await videoRef.PausePlayback();
        await SendState();

        await videoRef.ReloadControl();
        await InvokeAsync(StateHasChanged);
    }
    
    private long maxFileSize = 2L * 1024 * 1024 * 1024;
    private int maxAllowedFiles = 3;
    private bool isUploading;
    private string[] supportedFormats = {".mp4", ".webm", ".m4v", ".mkv"};

    CancellationTokenSource ReadToken;
    private async Task UploadFiles(UploadFile file)
    {
        isUploading = true;

            try
            {
                var dir =  Path.Combine(Configuration.GetSection("VideoMapping")["VideoPath"], "uploads");
                Directory.CreateDirectory(dir);
                var path = Path.Combine(dir, file.OriginFileName);

                if(!supportedFormats.Any(fo => path.EndsWith(fo)))
                {
                    await ToastService.Error("Upload", $"Only file formats {string.Join(' ', supportedFormats)} are supported!");
                }
                if(File.Exists(path))
                {
                    await ToastService.Error("Upload", $"File called {file.OriginFileName} already exists!");
                }

                ReadToken ??= new CancellationTokenSource();
                var ret = await file.SaveToFileAsync(path, maxFileSize, ReadToken.Token);

                if (ret)
                {
                    await ToastService.Success("Upload", "Upload completed");
                }
                else
                {
                    var errorMessage = $"Upload Failed!";
                    file.Code = 1;
                    file.Error = errorMessage;
                    await ToastService.Error("Upload Error", errorMessage);
                }
            }
            catch (Exception ex)
            {
                logger.LogError("File: {Filename} Error: {Error}", file.OriginFileName, ex.Message);
                await ToastService.Error("Upload Error", ex.Message);
            }

        isUploading = false;
        RefreshFileTree();
    }

    List<string> userListItems = new();
    
    private void RefreshConnectedUsers(List<UserConnectionCount> connectedUsers)
    {
        userListItems = connectedUsers.Select(u => u.ToString()).ToList();
    }

    private List<TreeViewItem<FileTreeViewItem>> TreeViewItems { get; set; } = new();
    private void RefreshFileTree()
    {
        TreeViewItems = FileTreeViewItem.EnumerateFilesWithRootMapping(
                Configuration.GetSection("VideoMapping")["VideoPath"] ?? "", 
                Configuration.GetSection("VideoMapping")["MapTo"] ?? "",
                supportedFormats);
    }

    protected override async Task OnInitializedAsync()
    {
        dotnetRef = DotNetObjectReference.Create(this);

        RefreshFileTree();
        var allOptionsEnabled = new VideoStateOptions() { All = true };
        foreach (var item in (VideoEvents[])(Enum.GetValues(typeof(VideoEvents))))
        {
            if (item != VideoEvents.NotSet)
            {
                options[item] = allOptionsEnabled;
            }
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/syncvideohub"), o => 
            {
                o.UseDefaultCredentials = true;
            })
            .Build();

        hubConnection.On<int, DateTimeOffset>("Ping", async (n, timestamp) =>
        {
            var dotnetRef = DotNetObjectReference.Create(this); 
            await JS.InvokeVoidAsync("ping", dotnetRef, n, timestamp).AsTask(); 
        });

        hubConnection.On<VideoStateDto>("ReceiveState", StateRecieved);

        hubConnection.On<List<UserConnectionCount>>("ConnectedUsersChanged", RefreshConnectedUsers);

        await hubConnection.StartAsync();

        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authstate.User?.Identity?.Name ?? "Invalid";
        await hubConnection.SendAsync("RegisterUser", username);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {            
            if (hubConnection is not null)
            {
                await JS.InvokeVoidAsync("ping", dotnetRef, 0, DateTimeOffset.UtcNow).AsTask();
                await hubConnection.SendAsync("RequestState");
            }
            else 
            {
                logger.LogInformation($"Hub was disposed!");
            }
        }
    }

    [JSInvokable("Pong")]
    public async Task Pong(int n, DateTimeOffset timestamp)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Pong", n, timestamp);
        }
        else 
        {
            logger.LogInformation($"Hub was disposed!");
        }
    }

    private VideoStateDto GetStateDto()
    {
        return new VideoStateDto()
        {
            IsPlaying = !videoState.Paused,
            Source = videoSource,
            Captions = videoCaptions,
            VideoTimestamp = videoState.CurrentTime
        };
    }

    private async Task StateRecieved(VideoStateDto newstate)
    {
        if (videoRef is null)
            return;

        disableSendingState = true;

        logger.LogInformation($"Client: State recieved. {newstate.Source?.Split('/').LastOrDefault()} {newstate.IsPlaying} {newstate.VideoTimestamp}");

        if(newstate.Source != videoSource)
        {
            logger.LogInformation($"Client: Setting video source.");
            videoSource = newstate.Source;
            videoCaptions = newstate.Captions;
            videoSourceTitle = videoSource?.Split('/').LastOrDefault() ?? "";

            if(!string.IsNullOrEmpty(videoSource))
            {
                await InvokeAsync(StateHasChanged);
                await videoRef.ReloadControl();
            }
        }
        if (newstate.IsPlaying)
        {
            logger.LogInformation($"Client: Pausing playback.");
            await videoRef.StartPlayback();
        }
        else
        {
            logger.LogInformation($"Client: Pausing playback.");
            await videoRef.PausePlayback();
        }
        if(Math.Abs(newstate.VideoTimestamp - videoState.CurrentTime) > 0.5)
        {
            logger.LogInformation($"Client: Setting time.");
            await videoRef.SetCurrentTimeAsync(newstate.VideoTimestamp); 
        }
        lastUpdateRecieved = DateTimeOffset.Now;
        await InvokeAsync(StateHasChanged);

        await Task.Delay(200);
        disableSendingState = false;
    }

    private async Task SendState()
    {
        if (disableSendingState)
            return;
        if ((DateTimeOffset.Now - lastUpdateRecieved).TotalSeconds < 0.7)
            return;

        VideoStateDto newstate = GetStateDto(); 
        logger.LogInformation($"Client: Sending state. {newstate.Source?.Split('/')?.LastOrDefault()} {newstate.IsPlaying} {newstate.VideoTimestamp}");

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateState", newstate);
        }
    }

    private async void OnEvent(VideoEventData videoData)
    {
        videoState = videoData.State;
        
        switch (videoData.EventName)
        {
            case VideoEvents.Play:
            case VideoEvents.Playing:
            case VideoEvents.Pause:
            case VideoEvents.Seeking:
            @* case VideoEvents.Seeked: *@
                logger.LogInformation($"Client: OnEvent: {videoData.EventName} {videoState.CurrentTime}");
                await SendState();
                break;

            default:
            break;
        }
        @* StateHasChanged(); *@
    }

    public async ValueTask DisposeAsync()
    {
        logger.LogInformation("Client: Disposing razor page.");
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        ReadToken?.Cancel();
        GC.SuppressFinalize(this);
    }
}